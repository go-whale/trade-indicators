package trade_indicators

import (
	"errors"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestCalculateStochastic(t *testing.T) {
	type args struct {
		high   []float64
		low    []float64
		close  []float64
		period int
	}
	tests := []struct {
		name string
		args args
		want func() ([]float64, []float64, error)
	}{
		{
			name: "correct",
			args: args{
				high: []float64{
					285.46, 282.69, 286.48, 295.08, 294.90, 300.92, 302.15, 285.45, 295.09, 303.77, 302.97, 307.85, 306.02,
					302.06, 292.97, 285.18, 287.48, 285.54, 278.82, 284.6, 275.5, 280, 278.85, 279.85, 284.76, 292.72,
					285.73, 292.82, 297.74, 292.13, 287.48, 296.08, 296.90, 300.92, 288.48, 288.54, 278.82, 286.49, 302.06, 295.97, 286.18,
				},
				low: []float64{
					283.2, 280.61, 284.48, 294, 292, 299, 301, 284, 293, 302, 300, 305, 304,
					301, 291, 284, 286, 283, 276, 284, 275, 278, 277, 278, 283, 291,
					283, 291, 296, 291, 285, 294, 293, 299, 286, 283, 275, 283, 300, 291, 284,
				},
				close: []float64{
					283.46, 280.69, 285.48, 294.08, 293.90, 299.92, 301.15, 284.45, 294.09, 302.77, 301.97, 306.85, 305.02,
					301.06, 291.97, 284.18, 286.48, 284.54, 276.82, 284.49, 275.01, 279.07, 277.85, 278.85, 283.76, 291.72,
					284.73, 291.82, 296.74, 291.13, 285.48, 294.08, 293.90, 299.92, 286.48, 284.54, 276.82, 284.49, 301.06, 291.97, 284.18,
				},
				period: 5,
			},
			want: func() ([]float64, []float64, error) {
				return []float64{95.08, 95.36, 17.83, 62.58, 95.68, 92.23, 96.33, 89.61, 75.07, 41.7, 13.11, 21.55, 14.43, 2.57, 26.66, 0.03, 12.39, 8.68, 11.72, 26.67, 50.9, 29.62, 51.2, 66.18, 49.1, 31.9, 58.08, 57.53, 75.86, 34.95, 29.04, 5.54, 28.89, 79.33, 51.66, 27.95},
					[]float64{69.42, 58.59, 58.7, 83.5, 94.75, 92.72, 87, 68.79, 43.29, 25.45, 16.36, 12.85, 14.55, 9.75, 13.03, 7.03, 10.93, 15.69, 29.76, 35.73, 43.91, 49, 55.49, 49.06, 46.36, 49.17, 63.82, 56.11, 46.62, 23.18, 21.16, 37.92, 53.29, 52.98}, nil
			},
		},
		{
			name: "err args len",
			args: args{
				high: []float64{
					285.46, 282.69, 286.48, 295.08, 294.90, 300.92, 302.15, 285.45, 295.09, 303.77, 302.97, 307.85, 306.02,
					302.06, 292.97, 285.18, 287.48, 285.54, 278.82, 284.6, 275.5, 280, 278.85, 279.85, 284.76, 292.72,
					285.73, 292.82, 297.74, 292.13, 287.48, 296.08, 296.90, 300.92, 288.48, 288.54, 278.82, 286.49, 302.06, 295.97, 286.18,
				},
				low: []float64{
					283.2, 280.61, 284.48, 294, 292, 299, 301, 284, 293, 302, 300, 305, 304,
				},
				close: []float64{
					283.46, 280.69, 285.48, 294.08, 293.90, 299.92, 301.15, 284.45, 294.09, 302.77, 301.97, 306.85, 305.02,
				},
				period: 5,
			},
			want: func() ([]float64, []float64, error) {
				return nil, nil, errors.New("high, low and close array prices must be same len")
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			macd, signal, err := CalculateStochastic(tt.args.high, tt.args.low, tt.args.close, tt.args.period)

			expectedMacd, expectedSignal, expectedErr := tt.want()
			assert.Equal(t, expectedMacd, macd)
			assert.Equal(t, expectedSignal, signal)
			assert.Equal(t, expectedErr, err)
		})
	}
}
